firstLevelName = arg[1]
root = "../"
levelsDirectory = "resources/levels"
levelsPath = root .. levelsDirectory
outputPath = root .. "levels.lua"

if not firstLevelName then
  script = "genlvl.lua"
  print("Usage: " .. script .. " <firstLevelName>")
  print()
  print("Examples:")
  print("    " .. script .. " park ")
  print("    " .. script .. " 'some cool level name' ")
  print()
  return
end


-- Get all files in levelsPath that end with .lua
stream = io.popen("ls " .. levelsPath .. "/*.lua")
files = {}
for path in stream:lines() do
  local name = string.gsub(path, levelsPath .. "/(.*).lua", "%1")
  local filePath = levelsDirectory .. "/" .. name .. ".lua"

  print('Found "' .. name .. '"')
  gotAMatch = name == firstLevelName
  files[#files + 1] = {name=name, path=filePath}
end
stream:close()

if not gotAMatch then
  print('"' .. firstLevelName .. '" not found in ' .. levelsPath)
  return
end


-- Generate module content from files
content = [=[--[[
     This file was automatically generated by genlvl.
     Edit *.lua files in "]=] .. levelsDirectory .. [=[".  
     Don't edit this one: any change you make here will be overwritten.
  ]]
module("levels", package.seeall)


level = {
]=]
for i, file in ipairs(files) do
  io.input(root .. file.path)
  newContent = '  ["' .. file.name .. '"] = ' .. io.read("*all")
  newContent = string.gsub(newContent, "\n", "\n  ")
  newContent = string.gsub(newContent, "}[%s^,]*$", "},\n\n")
  content = content .. newContent
end
content = content .. '}\n\nfirst = "' .. firstLevelName .. '"'
io.output(outputPath)
io.write(content)
print(outputPath)
print(content)
